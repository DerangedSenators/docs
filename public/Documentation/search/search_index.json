{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deranged Senators Documentation Documentation Site for Deranged Senators. This site holds all of the documentation for our work. More to Follow!","title":"Deranged Senators Documentation"},{"location":"#deranged-senators-documentation","text":"Documentation Site for Deranged Senators. This site holds all of the documentation for our work. More to Follow!","title":"Deranged Senators Documentation"},{"location":"Cops%20And%20Robbers/","text":"Cops And Robbers Cops and Robbers is a 2D online multiplayer game developed using Unity, currently in development by Deranged Senators. These pages contain the documentation for the game","title":"Cops And Robbers"},{"location":"Cops%20And%20Robbers/#cops-and-robbers","text":"Cops and Robbers is a 2D online multiplayer game developed using Unity, currently in development by Deranged Senators. These pages contain the documentation for the game","title":"Cops And Robbers"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/","text":"Effective Commits and Code Reviews This document will detail how to make the best commits and how to effectively review your peer's work Commits A commit is a term used for saving a change to a file or a set of files. There are several components to a commit. 1. The changes you have made to the files (additions and deletions) 2. A commit hash: A hash of the commit used to identify the commit 3. A commit message and summary(optional): The Commit message is a short (50 characters max) statement of the changes made in the commit and you can include a summary if you think that a wider explanation is neccessary. Please read the following for more information Comment Convention When commiting, make sure that each commit as consise as possible and DO NOT add more files than neccessary to each commit. This will cause a lot of headaches should you need to revert a small change in an unneccesarily large commit and it may also result in merge conflicts How to commit Once you have saved your changes, open your git client or terminal and stage the changes using git add <filename(s) or * for all changes> Commit all stage files using git commit -m \"MESSAGE HERE\" Push the changes to your github repository using git push Your files are now uploaded to github and are ready for peer review to be accepted into the main repository Creating a Pull Request Once you have uploaded your changes to Github, and the source is ready to be merged into the main repository (It could take many commits to reach this stage), Go ahead and open a pull request. Here you will have to add a title and a summary of the changes you have made. You must also add a reviewer (or multiple). This should be someone who knows the task and is able to provide a thorough review. You will also need to assign yourself and whoever worked with you on those commits to the pull request. Feel free to also include tags to make it easier to understand. Once you have filled out the form, you are ready to open the pull request Once you open a pull request, All changes that you make on that branch is tracked by the pull request so if you want to work on a different task, be sure to checkout a different branch Code Review Code review is a step of development when a peer goes through your changes before it is admitted into the main repository to keep the code as bug free and clean as possible. Effective code review is crucial for faster collaborative development. Reviewing Code When reviewing code, ensure that you fully understand the changes that have been made and if applicable, be sure to test those changes for bugs. Feel free to use the comments section to find out more and to provide feedback. Reviewers are able to accept, deny and request improvement on changes. Be sure to make full use of this to maintain the repository as best as possible If you are having your change reviewed, be sure to be active on the pull request page so that patches, if required can be submitted as fast as possible to spend as less time as you can on the code review phase. Updating Source As time goes on, others on the team will merge their changes into the main repository leaving yours behind. To ensure that your fork is up to date, you can do the following: # Add the remote, call it \"upstream\": git remote add upstream https://github.com/whoever/whatever.git # This should be a link to the main repository # Fetch all the branches of that remote into remote-tracking branches, # such as upstream/main: git fetch upstream # Make sure that you're on your main branch: git checkout main # Rewrite your main branch so that any commits of yours that # aren't already in upstream/main are replayed on top of that # other branch: git rebase upstream/main or git merge upstream/main if you don't want to rewrite history on your branch Once you have rebased locally, It is recommended to push the changes back onto your remote on Github. You can do that with: git push -f origin main You only need to use the -f flag the first time after a rebase Github Documentation for updating a Fork","title":"Effective Commits and Code Reviews"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#effective-commits-and-code-reviews","text":"This document will detail how to make the best commits and how to effectively review your peer's work","title":"Effective Commits and Code Reviews"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#commits","text":"A commit is a term used for saving a change to a file or a set of files. There are several components to a commit. 1. The changes you have made to the files (additions and deletions) 2. A commit hash: A hash of the commit used to identify the commit 3. A commit message and summary(optional): The Commit message is a short (50 characters max) statement of the changes made in the commit and you can include a summary if you think that a wider explanation is neccessary. Please read the following for more information Comment Convention When commiting, make sure that each commit as consise as possible and DO NOT add more files than neccessary to each commit. This will cause a lot of headaches should you need to revert a small change in an unneccesarily large commit and it may also result in merge conflicts","title":"Commits"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#how-to-commit","text":"Once you have saved your changes, open your git client or terminal and stage the changes using git add <filename(s) or * for all changes> Commit all stage files using git commit -m \"MESSAGE HERE\" Push the changes to your github repository using git push Your files are now uploaded to github and are ready for peer review to be accepted into the main repository","title":"How to commit"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#creating-a-pull-request","text":"Once you have uploaded your changes to Github, and the source is ready to be merged into the main repository (It could take many commits to reach this stage), Go ahead and open a pull request. Here you will have to add a title and a summary of the changes you have made. You must also add a reviewer (or multiple). This should be someone who knows the task and is able to provide a thorough review. You will also need to assign yourself and whoever worked with you on those commits to the pull request. Feel free to also include tags to make it easier to understand. Once you have filled out the form, you are ready to open the pull request Once you open a pull request, All changes that you make on that branch is tracked by the pull request so if you want to work on a different task, be sure to checkout a different branch","title":"Creating a Pull Request"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#code-review","text":"Code review is a step of development when a peer goes through your changes before it is admitted into the main repository to keep the code as bug free and clean as possible. Effective code review is crucial for faster collaborative development.","title":"Code Review"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#reviewing-code","text":"When reviewing code, ensure that you fully understand the changes that have been made and if applicable, be sure to test those changes for bugs. Feel free to use the comments section to find out more and to provide feedback. Reviewers are able to accept, deny and request improvement on changes. Be sure to make full use of this to maintain the repository as best as possible If you are having your change reviewed, be sure to be active on the pull request page so that patches, if required can be submitted as fast as possible to spend as less time as you can on the code review phase.","title":"Reviewing Code"},{"location":"Overview/Effective%20Commits%20and%20Code%20Reviews/#updating-source","text":"As time goes on, others on the team will merge their changes into the main repository leaving yours behind. To ensure that your fork is up to date, you can do the following: # Add the remote, call it \"upstream\": git remote add upstream https://github.com/whoever/whatever.git # This should be a link to the main repository # Fetch all the branches of that remote into remote-tracking branches, # such as upstream/main: git fetch upstream # Make sure that you're on your main branch: git checkout main # Rewrite your main branch so that any commits of yours that # aren't already in upstream/main are replayed on top of that # other branch: git rebase upstream/main or git merge upstream/main if you don't want to rewrite history on your branch Once you have rebased locally, It is recommended to push the changes back onto your remote on Github. You can do that with: git push -f origin main You only need to use the -f flag the first time after a rebase Github Documentation for updating a Fork","title":"Updating Source"},{"location":"Overview/Get%20Started/","text":"Getting started with Development Follow the following steps to get yourself ready for commiting changes to the repositories Get the source Fork the repository to your account Clone the newly forked repository to your computer with a git client (we are using gitkraken but anything will work) The source will be downloaded and you are ready for development. Good Luck Making Changes Once you have made changes, you will need to upload these to the main repository. By default, our repository does not allow direct pushing to keep the code clean and enforce peer review. You will therefore have to complete the following steps: Commit your changes using your git client. Smaller commits are generally better as they are easier to review and if needed easier to revert Push your changes to github From github, open a pull request to the main repository Fill out the pull request form and assign yourself and add a reviewer (can have multiple). Add other attributes as necessary Once you have opened the pull request, you will have to wait for reviewers to read and give feedback on your commits. If they request changes, then make them and merge into the request. Once they approve you can go ahead and merge your code providing there are no merge conflicts. If you find merge conflicts, then you will have to resolve these by picking which code to keep and what to let go","title":"Getting started with Development"},{"location":"Overview/Get%20Started/#getting-started-with-development","text":"Follow the following steps to get yourself ready for commiting changes to the repositories","title":"Getting started with Development"},{"location":"Overview/Get%20Started/#get-the-source","text":"Fork the repository to your account Clone the newly forked repository to your computer with a git client (we are using gitkraken but anything will work) The source will be downloaded and you are ready for development. Good Luck","title":"Get the source"},{"location":"Overview/Get%20Started/#making-changes","text":"Once you have made changes, you will need to upload these to the main repository. By default, our repository does not allow direct pushing to keep the code clean and enforce peer review. You will therefore have to complete the following steps: Commit your changes using your git client. Smaller commits are generally better as they are easier to review and if needed easier to revert Push your changes to github From github, open a pull request to the main repository Fill out the pull request form and assign yourself and add a reviewer (can have multiple). Add other attributes as necessary Once you have opened the pull request, you will have to wait for reviewers to read and give feedback on your commits. If they request changes, then make them and merge into the request. Once they approve you can go ahead and merge your code providing there are no merge conflicts. If you find merge conflicts, then you will have to resolve these by picking which code to keep and what to let go","title":"Making Changes"},{"location":"Overview/Project%20Design/","text":"Project Design for our Unity Project Use of Repositories Making use of multiple repositories is a great way to manage sub-projects within the main projects. Reusable components should be managed inside its own repository and then exported as a shared library ( .dll in Windows and .so in Linux). This will effectively make it easier to track changes and show our ability to think ahead as a \"startup company\" In our case, we could split our Game ( The code which directly interacts with Unity) and other components to acheive this Semantic Versioning Semantic Versioning is the process of assinging a unique version number. We will be applying semantic versioning on our releases. Semantic versioning will work as follows: <MAJOR>.<MINOR>.<PATCH> : The Major shows major changes to the Application which may break external application connections. Minor shows changes which will not break connections and Revision indicates bug fixes. Documenting Public APIs Public APIs expose features of the application/library to external application. These features must hold information so that they can be used correctly. C# Does this in a similar way to Java does with Javadoc albiet it does not generate webpages automatically. (I am looking into that). C# uses an XML syntax for documentation and you must be familiar with it if you are working with public APIs and it will come in handy for private methods and classes as it will allow team members to understand your code easier. Reference to C# Documentation Syntax","title":"Project Design for our Unity Project"},{"location":"Overview/Project%20Design/#project-design-for-our-unity-project","text":"","title":"Project Design for our Unity Project"},{"location":"Overview/Project%20Design/#use-of-repositories","text":"Making use of multiple repositories is a great way to manage sub-projects within the main projects. Reusable components should be managed inside its own repository and then exported as a shared library ( .dll in Windows and .so in Linux). This will effectively make it easier to track changes and show our ability to think ahead as a \"startup company\" In our case, we could split our Game ( The code which directly interacts with Unity) and other components to acheive this","title":"Use of Repositories"},{"location":"Overview/Project%20Design/#semantic-versioning","text":"Semantic Versioning is the process of assinging a unique version number. We will be applying semantic versioning on our releases. Semantic versioning will work as follows: <MAJOR>.<MINOR>.<PATCH> : The Major shows major changes to the Application which may break external application connections. Minor shows changes which will not break connections and Revision indicates bug fixes.","title":"Semantic Versioning"},{"location":"Overview/Project%20Design/#documenting-public-apis","text":"Public APIs expose features of the application/library to external application. These features must hold information so that they can be used correctly. C# Does this in a similar way to Java does with Javadoc albiet it does not generate webpages automatically. (I am looking into that). C# uses an XML syntax for documentation and you must be familiar with it if you are working with public APIs and it will come in handy for private methods and classes as it will allow team members to understand your code easier. Reference to C# Documentation Syntax","title":"Documenting Public APIs"},{"location":"Overview/Releasing/","text":"Releases from Deranged Senators We will be adopting Semantic Versioning for the majority of our projects. Release tags will be detailed as follows: <MAJOR>.<MINOR>.<PATCH>.[TAG].[HHMMDDMMYY] Tags Each release will come with a tag. The current allowed tags are: Tag Definition Pre-Release Description R Release Used to Mark a release RC Release Candidate An internal release to check for critical problems before releasing OB Open Beta Public Beta Program CB Closed Beta Private Beta Program A Alpha Alpha Builds are used for userend products which have not yet attained beta level DP Developer Preview Developer Previews give the public access to unreleased APIs to allow developers to test and begin integrating them into their products Tag Formatting A tag will be formatted as follows: {TAG}{CUMULATIVE_VALUE} The Cumulative value is a number which increments each time with a particular tag release. The cumulative value resets to 1 whenever the major value increases. RC values also reset to 1 when the corresponding R tag is published. Changelogs Changelogs are files which contain a list of changes on the current relase.In our case, Changelogs must be kept in a CHANGELOG.md in the root of the repository. The GitHub Release action will automatically take this file and use it for the body of the release. It will also automatically wipe the file once the release has been published Principles They must be human readable They must be present with every release They must be categorised to make it easier to understand Types of changes Added : New Features Changed : For changes in existing functionality Deprecated : To mark soon-to-be removed features Removed : Removed features Fixed : Bug fixes Security : Security Vulnerability Fixes Issues : Known problems regarding the release","title":"Releases from Deranged Senators"},{"location":"Overview/Releasing/#releases-from-deranged-senators","text":"We will be adopting Semantic Versioning for the majority of our projects. Release tags will be detailed as follows: <MAJOR>.<MINOR>.<PATCH>.[TAG].[HHMMDDMMYY]","title":"Releases from Deranged Senators"},{"location":"Overview/Releasing/#tags","text":"Each release will come with a tag. The current allowed tags are: Tag Definition Pre-Release Description R Release Used to Mark a release RC Release Candidate An internal release to check for critical problems before releasing OB Open Beta Public Beta Program CB Closed Beta Private Beta Program A Alpha Alpha Builds are used for userend products which have not yet attained beta level DP Developer Preview Developer Previews give the public access to unreleased APIs to allow developers to test and begin integrating them into their products","title":"Tags"},{"location":"Overview/Releasing/#tag-formatting","text":"A tag will be formatted as follows: {TAG}{CUMULATIVE_VALUE} The Cumulative value is a number which increments each time with a particular tag release. The cumulative value resets to 1 whenever the major value increases. RC values also reset to 1 when the corresponding R tag is published.","title":"Tag Formatting"},{"location":"Overview/Releasing/#changelogs","text":"Changelogs are files which contain a list of changes on the current relase.In our case, Changelogs must be kept in a CHANGELOG.md in the root of the repository. The GitHub Release action will automatically take this file and use it for the body of the release. It will also automatically wipe the file once the release has been published","title":"Changelogs"},{"location":"Overview/Releasing/#principles","text":"They must be human readable They must be present with every release They must be categorised to make it easier to understand","title":"Principles"},{"location":"Overview/Releasing/#types-of-changes","text":"Added : New Features Changed : For changes in existing functionality Deprecated : To mark soon-to-be removed features Removed : Removed features Fixed : Bug fixes Security : Security Vulnerability Fixes Issues : Known problems regarding the release","title":"Types of changes"},{"location":"Overview/Reusable%20Components/","text":"Reusable Components There is a core principle in software development known as DRY. DRY stands for Don't Repeat Yourself. This document will detail the steps you can take to ensure that all components in our project are written with this principle in mind. Reasoning Our project specification says that we are a startup company preparing to release our product into the market. Typically companies plan ahead and don't stick with a single product on their portfolios. This is something we should keep in mind when creating our product. Therefore, When you begin to create a component be it scripts or assets, you must think about the reusability of that compnent. Can it be implemented into a future product. If this is the case, you must think about developing it as a reusable component. Unity Unity offers a unique solution to the creation of reusable components through the use of Custom Packages . These packages can hold scripts, native objects, assets and more. It is widely recommended that you create a custom package when creating a Unity Reusable Component. Steps towards making a custom package Speak to another team member about converting an existing component or creating a new component as a package Create another repository on our github organisation to hold the package* Follow the steps found in the unity documentation to develop your component Once ready to include in the product, Include it as a Git Dependency in the product's packages.json file. This will allow the editor to fetch the latest version directly from git, simplifying the import process C/C++ Reusable C/C++ code must be compiled into a seperate shared or static library (depending on how it needs to be used) and then imported into the project.","title":"Reusable Components"},{"location":"Overview/Reusable%20Components/#reusable-components","text":"There is a core principle in software development known as DRY. DRY stands for Don't Repeat Yourself. This document will detail the steps you can take to ensure that all components in our project are written with this principle in mind.","title":"Reusable Components"},{"location":"Overview/Reusable%20Components/#reasoning","text":"Our project specification says that we are a startup company preparing to release our product into the market. Typically companies plan ahead and don't stick with a single product on their portfolios. This is something we should keep in mind when creating our product. Therefore, When you begin to create a component be it scripts or assets, you must think about the reusability of that compnent. Can it be implemented into a future product. If this is the case, you must think about developing it as a reusable component. Unity Unity offers a unique solution to the creation of reusable components through the use of Custom Packages . These packages can hold scripts, native objects, assets and more. It is widely recommended that you create a custom package when creating a Unity Reusable Component.","title":"Reasoning"},{"location":"Overview/Reusable%20Components/#steps-towards-making-a-custom-package","text":"Speak to another team member about converting an existing component or creating a new component as a package Create another repository on our github organisation to hold the package* Follow the steps found in the unity documentation to develop your component Once ready to include in the product, Include it as a Git Dependency in the product's packages.json file. This will allow the editor to fetch the latest version directly from git, simplifying the import process C/C++ Reusable C/C++ code must be compiled into a seperate shared or static library (depending on how it needs to be used) and then imported into the project.","title":"Steps towards making a custom package"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/","text":"C# Source Design Before you begin writing code in C# please take a moment to read this document as It contains the conventions that we, as a group will use throught C# classes. C# Naming Conventions Please take a look at this page for C# naming conventions Our namespace To the java package, we have namespaces in C#. This will take the form of our reverse domain all in lower case with consecutive words concatenated together: me.derangedsenators.<product>.<feature>.<subnamespace> more on namespaces here Code file structure A source file consists of, in order: License or copyright information, if present Import Statements Namespace declaration Exactly one top-level class Exactly one blank line seperating each section that is present Non-ASCII characters For non-ASCII characters, an actual Unicode or equivalent Unicode escape is used. The choice depends only on what makes the code easier to understand, although Unicode escapes outside string literals and comments are strongly discouraged. For Example: | Code | Comment | | ------------- |-------------| | string UnitAbbrev = \"\u03bcs\" | Best: perfectly clear even without a comment.| | string UnitAbbrev = \"\\u03bcs\"; // \"\u03bcs\" | Allowed, but there's no reason to do this. | | string UnitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" | Allowed, but awkward and prone to mistakes. | | string UnitAbbrev = \"\\u03bcs\"; | Poor: the reader has no idea what this is. | | return '\\ufeff' + Content; // byte order mark |Good: use escapes for non-printable characters, and comment if necessary. | Formatting Braces Braces are used with if , else , for , do and while statements, even when the body is empty or contains only a single statement. Variable Declaration Only have one variable per declaration Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used. Exception: Multiple variable declarations are acceptable in the header of a for loop. Declare variables when requried Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration. Switch Statements Indentation As with all blocks, the contents of switch blocks are indented by 1 tab Deprecating Methods and Classes If code classes or methods are replaced by newer ones or are no longer maintained. The best way to do this should be: [Obsolete(\"Method1 is deprecated, please use Method2 instead.\")] // YOu must include a message here to inform developers. public void Method1() { \u2026 } If you also need this to cause an error during compilaton instead of a warning (enforcing changes to be made) add true to the obsolete attribute like this [Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)] Some parts have been adapted from (https://google.github.io/styleguide/javaguide.html) for C# Code Comments To ensure that code is self-explainable, It is recommended to add code comments. In C#, Code comments are written after a double slash for single ( // ) line or a slash and asterisk ( /* */ ) for multiline comments. Documentation Classes, Methods and functions can be documented using C# XML documentation which is automatically activated by most C# ides whenever a /// is typed above a class or method. Similar to HTML, XML makes use of tags which you can use to document your code. The description should be included in the <summary> tags.","title":"C# Source Design"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#c-source-design","text":"Before you begin writing code in C# please take a moment to read this document as It contains the conventions that we, as a group will use throught C# classes.","title":"C# Source Design"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#c-naming-conventions","text":"Please take a look at this page for C# naming conventions","title":"C# Naming Conventions"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#our-namespace","text":"To the java package, we have namespaces in C#. This will take the form of our reverse domain all in lower case with consecutive words concatenated together: me.derangedsenators.<product>.<feature>.<subnamespace> more on namespaces here","title":"Our namespace"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#code-file-structure","text":"A source file consists of, in order: License or copyright information, if present Import Statements Namespace declaration Exactly one top-level class Exactly one blank line seperating each section that is present","title":"Code file structure"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#non-ascii-characters","text":"For non-ASCII characters, an actual Unicode or equivalent Unicode escape is used. The choice depends only on what makes the code easier to understand, although Unicode escapes outside string literals and comments are strongly discouraged. For Example: | Code | Comment | | ------------- |-------------| | string UnitAbbrev = \"\u03bcs\" | Best: perfectly clear even without a comment.| | string UnitAbbrev = \"\\u03bcs\"; // \"\u03bcs\" | Allowed, but there's no reason to do this. | | string UnitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" | Allowed, but awkward and prone to mistakes. | | string UnitAbbrev = \"\\u03bcs\"; | Poor: the reader has no idea what this is. | | return '\\ufeff' + Content; // byte order mark |Good: use escapes for non-printable characters, and comment if necessary. |","title":"Non-ASCII characters"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#formatting","text":"","title":"Formatting"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#braces","text":"Braces are used with if , else , for , do and while statements, even when the body is empty or contains only a single statement.","title":"Braces"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#variable-declaration","text":"","title":"Variable Declaration"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#only-have-one-variable-per-declaration","text":"Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used. Exception: Multiple variable declarations are acceptable in the header of a for loop.","title":"Only have one variable per declaration"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#declare-variables-when-requried","text":"Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration.","title":"Declare variables when requried"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#switch-statements","text":"","title":"Switch Statements"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#indentation","text":"As with all blocks, the contents of switch blocks are indented by 1 tab","title":"Indentation"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#deprecating-methods-and-classes","text":"If code classes or methods are replaced by newer ones or are no longer maintained. The best way to do this should be: [Obsolete(\"Method1 is deprecated, please use Method2 instead.\")] // YOu must include a message here to inform developers. public void Method1() { \u2026 } If you also need this to cause an error during compilaton instead of a warning (enforcing changes to be made) add true to the obsolete attribute like this [Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)] Some parts have been adapted from (https://google.github.io/styleguide/javaguide.html) for C#","title":"Deprecating Methods and Classes"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#code-comments","text":"To ensure that code is self-explainable, It is recommended to add code comments. In C#, Code comments are written after a double slash for single ( // ) line or a slash and asterisk ( /* */ ) for multiline comments.","title":"Code Comments"},{"location":"Overview/Source%20Design%20Documents/C%23%20Design/#documentation","text":"Classes, Methods and functions can be documented using C# XML documentation which is automatically activated by most C# ides whenever a /// is typed above a class or method. Similar to HTML, XML makes use of tags which you can use to document your code. The description should be included in the <summary> tags.","title":"Documentation"},{"location":"Overview/Source%20Design%20Documents/C%2B%2B%20Design/","text":"C++ Source Design More to Follow","title":"C++ Source Design"},{"location":"Overview/Source%20Design%20Documents/C%2B%2B%20Design/#c-source-design","text":"More to Follow","title":"C++ Source Design"},{"location":"PlayerLink/","text":"PlayerLink PlayerLink is a native multiplayer API currently in development by Deranged Senators. This API will provide developers with a server 'game-room' environment to host online multiplayer games. Here, you will find the documentation for our source code which is also available on GitHub and is licensed with the Apache 2.0 license.","title":"PlayerLink"},{"location":"PlayerLink/#playerlink","text":"PlayerLink is a native multiplayer API currently in development by Deranged Senators. This API will provide developers with a server 'game-room' environment to host online multiplayer games. Here, you will find the documentation for our source code which is also available on GitHub and is licensed with the Apache 2.0 license.","title":"PlayerLink"},{"location":"PlayerLink/Open%20Source%20Licenses/","text":"Open Source Licenses Apache License, Version 2.0 (Apache 2.0) is the preferred license for PlayerLink, and the associated extensions and plugins related to PlayerLink, released by DerangedSenators is also licensed with Apache 2.0. While the project strives to adhere to the preferred license, there are exceptions, which are handled on a case-by-case basis.","title":"Open Source Licenses"},{"location":"PlayerLink/Open%20Source%20Licenses/#open-source-licenses","text":"Apache License, Version 2.0 (Apache 2.0) is the preferred license for PlayerLink, and the associated extensions and plugins related to PlayerLink, released by DerangedSenators is also licensed with Apache 2.0. While the project strives to adhere to the preferred license, there are exceptions, which are handled on a case-by-case basis.","title":"Open Source Licenses"},{"location":"PlayerLink/Architecture/Overlay%20System/","text":"PlayerLink Overlay System - Beta As PlayerLink is developed as a native cross-platform system, accomodations have had to be made for platform-specific code. As a result we have developed the overlay system. How it works An overlay is a static library created to be linked onto a PlayerLink library if conditions are met during runtime Example of Overlay One of the overlays we have created is the winsockinit overlay which holds code that needs to be included on top of PLAYERLINK_CORE_NET library for Windows devices ( winsockinit.h holds code required by Windows to initialise the Winsock2.dll library). The overlay was created as follows: Create a mirroring path within src/platfrom/microsoft/win32/overlays mirroring the src directory, In this case we had to add the following subfolders core/net . In this folder, add your source code. In the case of this example it was winsockinit.h and winsockinit.c . Create a CMakeLists.txt in the folder and add the following: add_library( PLAYERLINK_CORE_NET_WIN32 winsockinit.h winsockinit.c ) This creates the static library which will be linked into PLAYERLINK_CORE_NET Now you need to add some code in core/net/CMakeLists.txt to ensure that this library is compiled: IF(WIN32) include_directories(${CMAKE_SOURCE_DIR}/src/platform/microsoft/win32/overlays/core/net/) target_link_libraries(PLAYERLINK_CORE_NET PRIVATE PLAYERLINK_CORE_NET_WIN32) ENDIF() This chunk of code will link the overlay library if the compiler detects that it is compiling on a Win32 system. Now in your code, you will have to use macros to include the winsockinit.h file. For example: #ifdef WIN32 #include 'winsockinit.h' #endif This will ensure that the defined functions are included in the class that is using them. Nested Method Calls We are currently working on a solution to have efficient nested method calls using the overlay system but at the moment you may use pre-processor directives as a workaround Exclusive Classes and Methods At the moment we havent yet created a solution to allow for exclusive methods to existing PlayerLink classes but you can include classes using pre-processor directives","title":"PlayerLink Overlay System - Beta"},{"location":"PlayerLink/Architecture/Overlay%20System/#playerlink-overlay-system-beta","text":"As PlayerLink is developed as a native cross-platform system, accomodations have had to be made for platform-specific code. As a result we have developed the overlay system.","title":"PlayerLink Overlay System - Beta"},{"location":"PlayerLink/Architecture/Overlay%20System/#how-it-works","text":"An overlay is a static library created to be linked onto a PlayerLink library if conditions are met during runtime","title":"How it works"},{"location":"PlayerLink/Architecture/Overlay%20System/#example-of-overlay","text":"One of the overlays we have created is the winsockinit overlay which holds code that needs to be included on top of PLAYERLINK_CORE_NET library for Windows devices ( winsockinit.h holds code required by Windows to initialise the Winsock2.dll library). The overlay was created as follows: Create a mirroring path within src/platfrom/microsoft/win32/overlays mirroring the src directory, In this case we had to add the following subfolders core/net . In this folder, add your source code. In the case of this example it was winsockinit.h and winsockinit.c . Create a CMakeLists.txt in the folder and add the following: add_library( PLAYERLINK_CORE_NET_WIN32 winsockinit.h winsockinit.c ) This creates the static library which will be linked into PLAYERLINK_CORE_NET Now you need to add some code in core/net/CMakeLists.txt to ensure that this library is compiled: IF(WIN32) include_directories(${CMAKE_SOURCE_DIR}/src/platform/microsoft/win32/overlays/core/net/) target_link_libraries(PLAYERLINK_CORE_NET PRIVATE PLAYERLINK_CORE_NET_WIN32) ENDIF() This chunk of code will link the overlay library if the compiler detects that it is compiling on a Win32 system. Now in your code, you will have to use macros to include the winsockinit.h file. For example: #ifdef WIN32 #include 'winsockinit.h' #endif This will ensure that the defined functions are included in the class that is using them.","title":"Example of Overlay"},{"location":"PlayerLink/Architecture/Overlay%20System/#nested-method-calls","text":"We are currently working on a solution to have efficient nested method calls using the overlay system but at the moment you may use pre-processor directives as a workaround","title":"Nested Method Calls"},{"location":"PlayerLink/Architecture/Overlay%20System/#exclusive-classes-and-methods","text":"At the moment we havent yet created a solution to allow for exclusive methods to existing PlayerLink classes but you can include classes using pre-processor directives","title":"Exclusive Classes and Methods"},{"location":"PlayerLink/Architecture/PlayerLink%20Repository/","text":"The PlayerLink Repository The PlayerLink repository contains the source code for both server and client base implementation of PlayerLink. PlayerLink is built using CMake, a cross-platform C/C++ build system. Repository Layout The Repository is layed out as follows: \ud83d\udcc2 \ud83d\udce6 \u2523 \u2503 ``` \ud83d\udce6 PlayerLink \u2503 \u2523 \ud83d\udcc2 include \u2503 \u2523 *.cmake //These files will host cmake functions to import additional libraries such as boost \u2503 \u2523 \ud83d\udcc2 Libraries \u2503 \u2523 \ud83d\udcc2 dynlibs \u2503 \u2503 \u2523 \ud83d\udcc2 win //Windows DLLs \u2503 \u2503 \u2523 \ud83d\udcc2 linux //Linux .so files \u2503 \u2503 \u2523 \ud83d\udcc2 mac // dynlibs for MacOS \u2503 \u2523 \ud83d\udcc2 static \u2503 \u2523 \ud83d\udcc2 win //Windows Static libs \u2503 \u2523 \ud83d\udcc2 linux //Linux Static libs \u2503 \u2523 \ud83d\udcc2 mac // dynlibs Static libs \u2523 \ud83d\udcc2 src \u2523 \ud83d\udcc2client // PlayerLink Client system \u2503 \u2523 \ud83d\udcc2net // Client Network Code \u2523 \ud83d\udcc2core // PlayerLink Core Library \u2503 \u2523 \ud83d\udcc2crypto // Cryptography Functions \u2503 \u2523 \ud83d\udcc2net // Networking code \u2503 \u2523 \ud83d\udcc2utils // PlayerLink Utility Code \u2503 \u2503 \u2523 \ud83d\udcc2exceptions //PlayerLink Exceptions Library \u2503 \u2503 \u2523 \ud83d\udcc2logger // PlayerLink Logger \u2523 \ud83d\udcc2platform \u2503 \u2523 \ud83d\udcc2ieee \u2503 \u2503 \u2517 \ud83d\udcc2posix // Posix Specific code \u2503 \u2523 \ud83d\udcc2microsoft \u2503 \u2503 \u2517 \ud83d\udcc2win32 //Win32 specific code \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2overlays \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2core \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2net \u2503 \u2517 \ud83d\udcc2unix // Unix specific code \u2517 \ud83d\udcc2server // PlayerLink Server \u2503 \u2523 \ud83d\udcc2net // Network sources \u2503 \u2523 \ud83d\udcc2room //GameRoom sources","title":"The PlayerLink Repository"},{"location":"PlayerLink/Architecture/PlayerLink%20Repository/#the-playerlink-repository","text":"The PlayerLink repository contains the source code for both server and client base implementation of PlayerLink. PlayerLink is built using CMake, a cross-platform C/C++ build system.","title":"The PlayerLink Repository"},{"location":"PlayerLink/Architecture/PlayerLink%20Repository/#repository-layout","text":"The Repository is layed out as follows: \ud83d\udcc2 \ud83d\udce6 \u2523 \u2503 ``` \ud83d\udce6 PlayerLink \u2503 \u2523 \ud83d\udcc2 include \u2503 \u2523 *.cmake //These files will host cmake functions to import additional libraries such as boost \u2503 \u2523 \ud83d\udcc2 Libraries \u2503 \u2523 \ud83d\udcc2 dynlibs \u2503 \u2503 \u2523 \ud83d\udcc2 win //Windows DLLs \u2503 \u2503 \u2523 \ud83d\udcc2 linux //Linux .so files \u2503 \u2503 \u2523 \ud83d\udcc2 mac // dynlibs for MacOS \u2503 \u2523 \ud83d\udcc2 static \u2503 \u2523 \ud83d\udcc2 win //Windows Static libs \u2503 \u2523 \ud83d\udcc2 linux //Linux Static libs \u2503 \u2523 \ud83d\udcc2 mac // dynlibs Static libs \u2523 \ud83d\udcc2 src \u2523 \ud83d\udcc2client // PlayerLink Client system \u2503 \u2523 \ud83d\udcc2net // Client Network Code \u2523 \ud83d\udcc2core // PlayerLink Core Library \u2503 \u2523 \ud83d\udcc2crypto // Cryptography Functions \u2503 \u2523 \ud83d\udcc2net // Networking code \u2503 \u2523 \ud83d\udcc2utils // PlayerLink Utility Code \u2503 \u2503 \u2523 \ud83d\udcc2exceptions //PlayerLink Exceptions Library \u2503 \u2503 \u2523 \ud83d\udcc2logger // PlayerLink Logger \u2523 \ud83d\udcc2platform \u2503 \u2523 \ud83d\udcc2ieee \u2503 \u2503 \u2517 \ud83d\udcc2posix // Posix Specific code \u2503 \u2523 \ud83d\udcc2microsoft \u2503 \u2503 \u2517 \ud83d\udcc2win32 //Win32 specific code \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2overlays \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2core \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2net \u2503 \u2517 \ud83d\udcc2unix // Unix specific code \u2517 \ud83d\udcc2server // PlayerLink Server \u2503 \u2523 \ud83d\udcc2net // Network sources \u2503 \u2523 \ud83d\udcc2room //GameRoom sources","title":"Repository Layout"},{"location":"PlayerLink/Classes/","text":"Classes struct DFHValues namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. class Client Client Class which is connected to the game and provides an interface to connect to the server. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. class Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class SHA256 class Socket Lowest socket implementation. This class will be used by top level socket implementations. class TCPSocket namespace Server Shared Library which will be implemented by the server application. class Client class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct Message struct Player class ServerSocket class TCPServer Updated on 15 April 2021 at 14:13:38 BST","title":"Classes"},{"location":"PlayerLink/Classes/#classes","text":"struct DFHValues namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. class Client Client Class which is connected to the game and provides an interface to connect to the server. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. class Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class SHA256 class Socket Lowest socket implementation. This class will be used by top level socket implementations. class TCPSocket namespace Server Shared Library which will be implemented by the server application. class Client class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct Message struct Player class ServerSocket class TCPServer Updated on 15 April 2021 at 14:13:38 BST","title":"Classes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/","text":"PlayerLink::Client::Client Client Class which is connected to the game and provides an interface to connect to the server. More... #include <Client.h> Public Functions Name Client (std::string serveraddr, std::string port =DEFAULT_TCP_PORT) Constructs a Client Instance. Currently only TCP functionality is available. ~Client () bool login (std::string usrname) Creates a Session with the server using the provided username. void logout () Logs the user out and disconnects the connection from the server. void addMsgToBuffer (unsigned char * message) Adds a message to the buffer to be sent to the server. Detailed Description class PlayerLink :: Client :: Client ; Client Class which is connected to the game and provides an interface to connect to the server. Author : Hanzalah Ravat Public Functions Documentation function Client Client ( std :: string serveraddr , std :: string port = DEFAULT_TCP_PORT ) Constructs a Client Instance. Currently only TCP functionality is available. Parameters : serveraddr The address of the server port The port to use to connect to the server Return : A Client Type which can be used to access client functions and methods function ~Client ~ Client () function login bool login ( std :: string usrname ) Creates a Session with the server using the provided username. Parameters : usrName This Users username Return : 0 if the session runs and exits successfully function logout void logout () Logs the user out and disconnects the connection from the server. function addMsgToBuffer void addMsgToBuffer ( unsigned char * message ) Adds a message to the buffer to be sent to the server. Parameters : message The byte array to be sent to the server Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Client::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#playerlinkclientclient","text":"Client Class which is connected to the game and provides an interface to connect to the server. More... #include <Client.h>","title":"PlayerLink::Client::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#public-functions","text":"Name Client (std::string serveraddr, std::string port =DEFAULT_TCP_PORT) Constructs a Client Instance. Currently only TCP functionality is available. ~Client () bool login (std::string usrname) Creates a Session with the server using the provided username. void logout () Logs the user out and disconnects the connection from the server. void addMsgToBuffer (unsigned char * message) Adds a message to the buffer to be sent to the server.","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#detailed-description","text":"class PlayerLink :: Client :: Client ; Client Class which is connected to the game and provides an interface to connect to the server. Author : Hanzalah Ravat","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-client","text":"Client ( std :: string serveraddr , std :: string port = DEFAULT_TCP_PORT ) Constructs a Client Instance. Currently only TCP functionality is available. Parameters : serveraddr The address of the server port The port to use to connect to the server Return : A Client Type which can be used to access client functions and methods","title":"function Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-client_1","text":"~ Client ()","title":"function ~Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-login","text":"bool login ( std :: string usrname ) Creates a Session with the server using the provided username. Parameters : usrName This Users username Return : 0 if the session runs and exits successfully","title":"function login"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-logout","text":"void logout () Logs the user out and disconnects the connection from the server.","title":"function logout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-addmsgtobuffer","text":"void addMsgToBuffer ( unsigned char * message ) Adds a message to the buffer to be sent to the server. Parameters : message The byte array to be sent to the server Updated on 15 April 2021 at 14:13:38 BST","title":"function addMsgToBuffer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/","text":"PlayerLink::Core::Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. More... #include <Logger.h> Public Functions Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log ( LogSeverity severity, std::string message, const boost::source_location & location =BOOST_CURRENT_LOCATION) Logger * getLogger () Detailed Description class PlayerLink :: Core :: Logger ; A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. Author : Hanzalah Ravat Ashwin Jaimal Public Functions Documentation function Logger Logger ( Logger & otherLogger ) Singleton Class should not be cloneable. Constructor used to prevent multiple instances of Logger function operator= void operator = ( const Logger & ) Singleton classes must not be assignable. This method will prevent the class from being assingned function log void log ( LogSeverity severity , std :: string message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : severity The Severity level of the log message The message which will be written into the logfile Method used to log an event function getLogger static Logger * getLogger () Return : A pointer to the Logger Instance in memory Gets the running logger instance pointer Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Core::Logger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#playerlinkcorelogger","text":"A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. More... #include <Logger.h>","title":"PlayerLink::Core::Logger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#public-functions","text":"Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log ( LogSeverity severity, std::string message, const boost::source_location & location =BOOST_CURRENT_LOCATION) Logger * getLogger ()","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#detailed-description","text":"class PlayerLink :: Core :: Logger ; A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. Author : Hanzalah Ravat Ashwin Jaimal","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-logger","text":"Logger ( Logger & otherLogger ) Singleton Class should not be cloneable. Constructor used to prevent multiple instances of Logger","title":"function Logger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-operator","text":"void operator = ( const Logger & ) Singleton classes must not be assignable. This method will prevent the class from being assingned","title":"function operator="},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-log","text":"void log ( LogSeverity severity , std :: string message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : severity The Severity level of the log message The message which will be written into the logfile Method used to log an event","title":"function log"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-getlogger","text":"static Logger * getLogger () Return : A pointer to the Logger Instance in memory Gets the running logger instance pointer Updated on 15 April 2021 at 14:13:38 BST","title":"function getLogger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/","text":"PlayerLink::Core::RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs More... #include <RuntimeException.h> Inherits from runtime_error Public Functions Name RuntimeException (const char * message, const boost::source_location & location =BOOST_CURRENT_LOCATION) const char * what () const Detailed Description class PlayerLink :: Core :: RuntimeException ; exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs Author : Ash Jaimal Hanzalah Ravat Public Functions Documentation function RuntimeException RuntimeException ( const char * message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : message The error message location The Location of the error. This is an optional parameter and is typically taken by default Creates a Runtime Exception function what const char * what () const Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Core::RuntimeException"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#playerlinkcoreruntimeexception","text":"exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs More... #include <RuntimeException.h> Inherits from runtime_error","title":"PlayerLink::Core::RuntimeException"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#public-functions","text":"Name RuntimeException (const char * message, const boost::source_location & location =BOOST_CURRENT_LOCATION) const char * what () const","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#detailed-description","text":"class PlayerLink :: Core :: RuntimeException ; exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs Author : Ash Jaimal Hanzalah Ravat","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#function-runtimeexception","text":"RuntimeException ( const char * message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : message The error message location The Location of the error. This is an optional parameter and is typically taken by default Creates a Runtime Exception","title":"function RuntimeException"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#function-what","text":"const char * what () const Updated on 15 April 2021 at 14:13:38 BST","title":"function what"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/","text":"PlayerLink::Core::SHA256 Protected Types Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64 Public Functions Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest) Protected Functions Name void transform (const unsigned char * message, unsigned int block_nb) Public Attributes Name const unsigned int DIGEST_SIZE Protected Attributes Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h Protected Types Documentation typedef uint8 typedef unsigned char uint8 ; typedef uint32 typedef unsigned int uint32 ; typedef uint64 typedef unsigned long long uint64 ; Public Functions Documentation function init void init () function update void update ( const unsigned char * message , unsigned int len ) function final void final ( unsigned char * digest ) Protected Functions Documentation function transform void transform ( const unsigned char * message , unsigned int block_nb ) Public Attributes Documentation variable DIGEST_SIZE static const unsigned int DIGEST_SIZE = ( 256 / 8 ); Protected Attributes Documentation variable sha256_k static const uint32 sha256_k = { 0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 , 0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 , 0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da , 0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 , 0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 , 0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 , 0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 , 0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 }; variable SHA224_256_BLOCK_SIZE static const unsigned int SHA224_256_BLOCK_SIZE = ( 512 / 8 ); variable m_tot_len unsigned int m_tot_len ; variable m_len unsigned int m_len ; variable m_block unsigned char m_block ; variable m_h uint32 m_h ; Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Core::SHA256"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#playerlinkcoresha256","text":"","title":"PlayerLink::Core::SHA256"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-types","text":"Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64","title":"Protected Types"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-functions","text":"Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-functions","text":"Name void transform (const unsigned char * message, unsigned int block_nb)","title":"Protected Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-attributes","text":"Name const unsigned int DIGEST_SIZE","title":"Public Attributes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-attributes","text":"Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h","title":"Protected Attributes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-types-documentation","text":"","title":"Protected Types Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#typedef-uint8","text":"typedef unsigned char uint8 ;","title":"typedef uint8"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#typedef-uint32","text":"typedef unsigned int uint32 ;","title":"typedef uint32"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#typedef-uint64","text":"typedef unsigned long long uint64 ;","title":"typedef uint64"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-init","text":"void init ()","title":"function init"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-update","text":"void update ( const unsigned char * message , unsigned int len )","title":"function update"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-final","text":"void final ( unsigned char * digest )","title":"function final"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-transform","text":"void transform ( const unsigned char * message , unsigned int block_nb )","title":"function transform"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-digest_size","text":"static const unsigned int DIGEST_SIZE = ( 256 / 8 );","title":"variable DIGEST_SIZE"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-sha256_k","text":"static const uint32 sha256_k = { 0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 , 0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 , 0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da , 0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 , 0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 , 0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 , 0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 , 0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 };","title":"variable sha256_k"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-sha224_256_block_size","text":"static const unsigned int SHA224_256_BLOCK_SIZE = ( 512 / 8 );","title":"variable SHA224_256_BLOCK_SIZE"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_tot_len","text":"unsigned int m_tot_len ;","title":"variable m_tot_len"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_len","text":"unsigned int m_len ;","title":"variable m_len"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_block","text":"unsigned char m_block ;","title":"variable m_block"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_h","text":"uint32 m_h ; Updated on 15 April 2021 at 14:13:38 BST","title":"variable m_h"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/","text":"PlayerLink::Core::Socket Lowest socket implementation. This class will be used by top level socket implementations. More... #include <Socket.h> Inherited by TCPSocket , TCPServer Public Functions Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Detailed Description class PlayerLink :: Core :: Socket ; Lowest socket implementation. This class will be used by top level socket implementations. Author : Hanzalah Ravat Public Functions Documentation function Socket Socket ( int family , int type , int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1 Attention : Winsock2.dll is automatically initialised when using this method on a Windows Device function Socket explicit Socket ( int fd ) function getAddress std :: string getAddress () const Returns the IP Address of the remote device. Return : Gets the address of the remote device function getPort uint32_t getPort () const Return : The port number used for this connection function getSocketDescriptor int getSocketDescriptor () const Return : The socket descriptor used for this socket function close bool close () Closes the connection. Return : True if socket closes or false if there was an error while closing the socket function isClosed bool isClosed () Return : true if the socket connection has been closed or false if it is still open function setBlocking bool setBlocking ( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status function getLastError int getLastError () Return : The last error number Protected Attributes Documentation variable mSocketFD int mSocketFD ; File Descriptor for this socket instance. variable socketIsClosed bool socketIsClosed ; Flag if socket is open or closed. variable isBlocked bool isBlocked ; Boolean to determine if blocking is enabled on this socket instance. Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Core::Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#playerlinkcoresocket","text":"Lowest socket implementation. This class will be used by top level socket implementations. More... #include <Socket.h> Inherited by TCPSocket , TCPServer","title":"PlayerLink::Core::Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#public-functions","text":"Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError ()","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#protected-attributes","text":"Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Protected Attributes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#detailed-description","text":"class PlayerLink :: Core :: Socket ; Lowest socket implementation. This class will be used by top level socket implementations. Author : Hanzalah Ravat","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-socket","text":"Socket ( int family , int type , int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1 Attention : Winsock2.dll is automatically initialised when using this method on a Windows Device","title":"function Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-socket_1","text":"explicit Socket ( int fd )","title":"function Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getaddress","text":"std :: string getAddress () const Returns the IP Address of the remote device. Return : Gets the address of the remote device","title":"function getAddress"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getport","text":"uint32_t getPort () const Return : The port number used for this connection","title":"function getPort"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getsocketdescriptor","text":"int getSocketDescriptor () const Return : The socket descriptor used for this socket","title":"function getSocketDescriptor"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-close","text":"bool close () Closes the connection. Return : True if socket closes or false if there was an error while closing the socket","title":"function close"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-isclosed","text":"bool isClosed () Return : true if the socket connection has been closed or false if it is still open","title":"function isClosed"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-setblocking","text":"bool setBlocking ( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status","title":"function setBlocking"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getlasterror","text":"int getLastError () Return : The last error number","title":"function getLastError"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#variable-msocketfd","text":"int mSocketFD ; File Descriptor for this socket instance.","title":"variable mSocketFD"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#variable-socketisclosed","text":"bool socketIsClosed ; Flag if socket is open or closed.","title":"variable socketIsClosed"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#variable-isblocked","text":"bool isBlocked ; Boolean to determine if blocking is enabled on this socket instance. Updated on 15 April 2021 at 14:13:38 BST","title":"variable isBlocked"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/","text":"PlayerLink::Core::TCPSocket More... #include <tcpsocket.h> Inherits from Socket Public Functions Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Detailed Description class PlayerLink :: Core :: TCPSocket ; TCPSocket Class extends the base socket class Public Functions Documentation function TCPSocket explicit TCPSocket ( int fd ) function TCPSocket explicit TCPSocket () function connect bool connect ( std :: string address , std :: string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem function connectWithTimeout bool connectWithTimeout ( std :: string address , std :: string port , int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem function canReceive bool canReceive ( int timeout = 10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond function recieve size_t recieve ( void * buffer , size_t bufferLength ) function recieveAll size_t recieveAll ( void * buffer , size_t bufferLength ) function recieveBytes unsigned char * recieveBytes () Recieves bytes from the remote. Return : an char* type used to hold incoming bytes function setRecvTimeout bool setRecvTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) function send size_t send ( void const * buffer , size_t bufferLength ) function sendAll size_t sendAll ( void const * buffer , size_t bufferLength ) function sendBytes bool sendBytes ( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully function setSendTimeout bool setSendTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Core::TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#playerlinkcoretcpsocket","text":"More... #include <tcpsocket.h> Inherits from Socket","title":"PlayerLink::Core::TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#public-functions","text":"Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#detailed-description","text":"class PlayerLink :: Core :: TCPSocket ; TCPSocket Class extends the base socket class","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-tcpsocket","text":"explicit TCPSocket ( int fd )","title":"function TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-tcpsocket_1","text":"explicit TCPSocket ()","title":"function TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-connect","text":"bool connect ( std :: string address , std :: string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem","title":"function connect"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-connectwithtimeout","text":"bool connectWithTimeout ( std :: string address , std :: string port , int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem","title":"function connectWithTimeout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-canreceive","text":"bool canReceive ( int timeout = 10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond","title":"function canReceive"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-recieve","text":"size_t recieve ( void * buffer , size_t bufferLength )","title":"function recieve"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-recieveall","text":"size_t recieveAll ( void * buffer , size_t bufferLength )","title":"function recieveAll"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-recievebytes","text":"unsigned char * recieveBytes () Recieves bytes from the remote. Return : an char* type used to hold incoming bytes","title":"function recieveBytes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-setrecvtimeout","text":"bool setRecvTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS )","title":"function setRecvTimeout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-send","text":"size_t send ( void const * buffer , size_t bufferLength )","title":"function send"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-sendall","text":"size_t sendAll ( void const * buffer , size_t bufferLength )","title":"function sendAll"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-sendbytes","text":"bool sendBytes ( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully","title":"function sendBytes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-setsendtimeout","text":"bool setSendTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Updated on 15 April 2021 at 14:13:38 BST","title":"function setSendTimeout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/","text":"PlayerLink::Server::Client Public Functions Name Client (int playerID, sockaddr_in sockaddrIn) Public Functions Documentation function Client Client ( int playerID , sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#playerlinkserverclient","text":"","title":"PlayerLink::Server::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#public-functions","text":"Name Client (int playerID, sockaddr_in sockaddrIn)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#function-client","text":"Client ( int playerID , sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 15 April 2021 at 14:13:38 BST","title":"function Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/","text":"PlayerLink::Server::GameRoom More... #include <GameRoom.h> Public Functions Name void broadcast (char * message) Detailed Description class PlayerLink :: Server :: GameRoom ; A GameRoom is a class which holds all players in a game Public Functions Documentation function broadcast void broadcast ( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::GameRoom"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#playerlinkservergameroom","text":"More... #include <GameRoom.h>","title":"PlayerLink::Server::GameRoom"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#public-functions","text":"Name void broadcast (char * message)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#detailed-description","text":"class PlayerLink :: Server :: GameRoom ; A GameRoom is a class which holds all players in a game","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#function-broadcast","text":"void broadcast ( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 15 April 2021 at 14:13:38 BST","title":"function broadcast"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/","text":"PlayerLink::Server::GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h> Public Functions Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer . Public Functions Documentation function GameServer GameServer () Constructs a GameServer . Return : function ~GameServer ~ GameServer () function start void start ( std :: string name ) Starts the GameServer . Parameters : name Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#playerlinkservergameserver","text":"A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h>","title":"PlayerLink::Server::GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#public-functions","text":"Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer .","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#function-gameserver","text":"GameServer () Constructs a GameServer . Return :","title":"function GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#function-gameserver_1","text":"~ GameServer ()","title":"function ~GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#function-start","text":"void start ( std :: string name ) Starts the GameServer . Parameters : name Updated on 15 April 2021 at 14:13:38 BST","title":"function start"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/","text":"PlayerLink::Server::ServerSocket Public Functions Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol) Public Functions Documentation function ServerSocket ServerSocket ( Protocols protocol , int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port function ServerSocket ServerSocket ( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#playerlinkserverserversocket","text":"","title":"PlayerLink::Server::ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#public-functions","text":"Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#function-serversocket","text":"ServerSocket ( Protocols protocol , int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port","title":"function ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#function-serversocket_1","text":"ServerSocket ( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 15 April 2021 at 14:13:38 BST","title":"function ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/","text":"PlayerLink::Server::TCPServer Inherits from Socket Public Functions Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events. Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function TCPServer TCPServer () Constructs a TCPServer object. Return : function listen void listen ( std :: string port , int backlog = 5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog function accept TCPSocket accept () Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them function monitorSocket void monitorSocket ( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor function unmonitor void unmonitor ( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor function getSocketEvents std :: vector < TCPSocket > getSocketEvents ( int timeout = 10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::TCPServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#playerlinkservertcpserver","text":"Inherits from Socket","title":"PlayerLink::Server::TCPServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#public-functions","text":"Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events.","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-tcpserver","text":"TCPServer () Constructs a TCPServer object. Return :","title":"function TCPServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-listen","text":"void listen ( std :: string port , int backlog = 5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog","title":"function listen"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-accept","text":"TCPSocket accept () Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them","title":"function accept"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-monitorsocket","text":"void monitorSocket ( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor","title":"function monitorSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-unmonitor","text":"void unmonitor ( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor","title":"function unmonitor"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-getsocketevents","text":"std :: vector < TCPSocket > getSocketEvents ( int timeout = 10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 15 April 2021 at 14:13:38 BST","title":"function getSocketEvents"},{"location":"PlayerLink/Classes/structDFHValues/","text":"DFHValues More... Public Attributes Name unsigned long commonPrime unsigned long secret int baseG Detailed Description struct DFHValues ; Diffie Hellman Key Exchange WIP Public Attributes Documentation variable commonPrime unsigned long commonPrime ; variable secret unsigned long secret ; variable baseG int baseG ; Updated on 15 April 2021 at 14:13:38 BST","title":"DFHValues"},{"location":"PlayerLink/Classes/structDFHValues/#dfhvalues","text":"More...","title":"DFHValues"},{"location":"PlayerLink/Classes/structDFHValues/#public-attributes","text":"Name unsigned long commonPrime unsigned long secret int baseG","title":"Public Attributes"},{"location":"PlayerLink/Classes/structDFHValues/#detailed-description","text":"struct DFHValues ; Diffie Hellman Key Exchange WIP","title":"Detailed Description"},{"location":"PlayerLink/Classes/structDFHValues/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/structDFHValues/#variable-commonprime","text":"unsigned long commonPrime ;","title":"variable commonPrime"},{"location":"PlayerLink/Classes/structDFHValues/#variable-secret","text":"unsigned long secret ;","title":"variable secret"},{"location":"PlayerLink/Classes/structDFHValues/#variable-baseg","text":"int baseG ; Updated on 15 April 2021 at 14:13:38 BST","title":"variable baseG"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/","text":"PlayerLink::Server::Message Public Functions Name Message () Message (int sock_id, unsigned char * bytes) Public Attributes Name int mSockID unsigned char * mBytes Public Functions Documentation function Message inline Message () function Message inline Message ( int sock_id , unsigned char * bytes ) Public Attributes Documentation variable mSockID int mSockID ; variable mBytes unsigned char * mBytes ; Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#playerlinkservermessage","text":"","title":"PlayerLink::Server::Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-functions","text":"Name Message () Message (int sock_id, unsigned char * bytes)","title":"Public Functions"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-attributes","text":"Name int mSockID unsigned char * mBytes","title":"Public Attributes"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#function-message","text":"inline Message ()","title":"function Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#function-message_1","text":"inline Message ( int sock_id , unsigned char * bytes )","title":"function Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#variable-msockid","text":"int mSockID ;","title":"variable mSockID"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#variable-mbytes","text":"unsigned char * mBytes ; Updated on 15 April 2021 at 14:13:38 BST","title":"variable mBytes"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/","text":"PlayerLink::Server::Player Public Functions Name Player () Player (std::string id, char userName, std::string ip) Public Attributes Name std::string mID std::string mIP char mUserName Public Functions Documentation function Player inline Player () function Player inline Player ( std :: string id , char userName , std :: string ip ) Public Attributes Documentation variable mID std :: string mID ; variable mIP std :: string mIP ; variable mUserName char mUserName ; Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server::Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#playerlinkserverplayer","text":"","title":"PlayerLink::Server::Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-functions","text":"Name Player () Player (std::string id, char userName, std::string ip)","title":"Public Functions"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-attributes","text":"Name std::string mID std::string mIP char mUserName","title":"Public Attributes"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#function-player","text":"inline Player ()","title":"function Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#function-player_1","text":"inline Player ( std :: string id , char userName , std :: string ip )","title":"function Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#variable-mid","text":"std :: string mID ;","title":"variable mID"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#variable-mip","text":"std :: string mIP ;","title":"variable mIP"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#variable-musername","text":"char mUserName ; Updated on 15 April 2021 at 14:13:38 BST","title":"variable mUserName"},{"location":"PlayerLink/Examples/","text":"Examples Updated on 15 April 2021 at 14:13:38 BST","title":"Examples"},{"location":"PlayerLink/Examples/#examples","text":"Updated on 15 April 2021 at 14:13:38 BST","title":"Examples"},{"location":"PlayerLink/Modules/","text":"Modules Updated on 15 April 2021 at 14:13:38 BST","title":"Modules"},{"location":"PlayerLink/Modules/#modules","text":"Updated on 15 April 2021 at 14:13:38 BST","title":"Modules"},{"location":"PlayerLink/Namespaces/","text":"Namespaces namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. namespace Server Shared Library which will be implemented by the server application. Updated on 15 April 2021 at 14:13:38 BST","title":"Namespaces"},{"location":"PlayerLink/Namespaces/#namespaces","text":"namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. namespace Server Shared Library which will be implemented by the server application. Updated on 15 April 2021 at 14:13:38 BST","title":"Namespaces"},{"location":"PlayerLink/Namespaces/namespacePlayerLink/","text":"PlayerLink Root Namespace for the PlayerLink API. Namespaces Name PlayerLink::Client Shared Library which will be implemented by the client application. PlayerLink::Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. PlayerLink::Server Shared Library which will be implemented by the server application. Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink"},{"location":"PlayerLink/Namespaces/namespacePlayerLink/#playerlink","text":"Root Namespace for the PlayerLink API.","title":"PlayerLink"},{"location":"PlayerLink/Namespaces/namespacePlayerLink/#namespaces","text":"Name PlayerLink::Client Shared Library which will be implemented by the client application. PlayerLink::Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. PlayerLink::Server Shared Library which will be implemented by the server application. Updated on 15 April 2021 at 14:13:38 BST","title":"Namespaces"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Client/","text":"PlayerLink::Client Shared Library which will be implemented by the client application. Classes Name class PlayerLink::Client::Client Client Class which is connected to the game and provides an interface to connect to the server. Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Client"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Client/#playerlinkclient","text":"Shared Library which will be implemented by the client application.","title":"PlayerLink::Client"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Client/#classes","text":"Name class PlayerLink::Client::Client Client Class which is connected to the game and provides an interface to connect to the server. Updated on 15 April 2021 at 14:13:38 BST","title":"Classes"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/","text":"PlayerLink::Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. Classes Name class PlayerLink::Core::Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class PlayerLink::Core::RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class PlayerLink::Core::SHA256 class PlayerLink::Core::Socket Lowest socket implementation. This class will be used by top level socket implementations. class PlayerLink::Core::TCPSocket Types Name enum Protocols { TCP, UDP } enum LogSeverity { FATAL, ERROR, WARNING, INFO, DEBUG, TRACE } A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. typedef char rawType Functions Name std::string sha256 (std::string input) Types Documentation enum Protocols Enumerator Value Description TCP UDP enum LogSeverity Enumerator Value Description FATAL ERROR WARNING INFO DEBUG TRACE A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. Author : Hanzalah Ravat typedef rawType typedef char rawType ; Functions Documentation function sha256 std :: string sha256 ( std :: string input ) Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Core"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#playerlinkcore","text":"Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library.","title":"PlayerLink::Core"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#classes","text":"Name class PlayerLink::Core::Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class PlayerLink::Core::RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class PlayerLink::Core::SHA256 class PlayerLink::Core::Socket Lowest socket implementation. This class will be used by top level socket implementations. class PlayerLink::Core::TCPSocket","title":"Classes"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#types","text":"Name enum Protocols { TCP, UDP } enum LogSeverity { FATAL, ERROR, WARNING, INFO, DEBUG, TRACE } A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. typedef char rawType","title":"Types"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#functions","text":"Name std::string sha256 (std::string input)","title":"Functions"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#types-documentation","text":"","title":"Types Documentation"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#enum-protocols","text":"Enumerator Value Description TCP UDP","title":"enum Protocols"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#enum-logseverity","text":"Enumerator Value Description FATAL ERROR WARNING INFO DEBUG TRACE A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. Author : Hanzalah Ravat","title":"enum LogSeverity"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#typedef-rawtype","text":"typedef char rawType ;","title":"typedef rawType"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#function-sha256","text":"std :: string sha256 ( std :: string input ) Updated on 15 April 2021 at 14:13:38 BST","title":"function sha256"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/","text":"PlayerLink::Server Shared Library which will be implemented by the server application. Classes Name class PlayerLink::Server::Client class PlayerLink::Server::GameRoom class PlayerLink::Server::GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct PlayerLink::Server::Message struct PlayerLink::Server::Player class PlayerLink::Server::ServerSocket class PlayerLink::Server::TCPServer Types Name typedef struct PlayerLink::Server::Message PlayerMessage typedef struct PlayerLink::Server::Player Player Types Documentation typedef PlayerMessage typedef struct PlayerLink :: Server :: Message PlayerMessage ; typedef Player typedef struct PlayerLink :: Server :: Player Player ; Updated on 15 April 2021 at 14:13:38 BST","title":"PlayerLink::Server"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#playerlinkserver","text":"Shared Library which will be implemented by the server application.","title":"PlayerLink::Server"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#classes","text":"Name class PlayerLink::Server::Client class PlayerLink::Server::GameRoom class PlayerLink::Server::GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct PlayerLink::Server::Message struct PlayerLink::Server::Player class PlayerLink::Server::ServerSocket class PlayerLink::Server::TCPServer","title":"Classes"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#types","text":"Name typedef struct PlayerLink::Server::Message PlayerMessage typedef struct PlayerLink::Server::Player Player","title":"Types"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#types-documentation","text":"","title":"Types Documentation"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#typedef-playermessage","text":"typedef struct PlayerLink :: Server :: Message PlayerMessage ;","title":"typedef PlayerMessage"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#typedef-player","text":"typedef struct PlayerLink :: Server :: Player Player ; Updated on 15 April 2021 at 14:13:38 BST","title":"typedef Player"}]}